# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_qr_tracker/Percept.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Percept(genpy.Message):
  _md5sum = "aa84c85dfcfcdf5ccbb58bb1c1c5e57b"
  _type = "ros_qr_tracker/Percept"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
string frame
string type
uint8 quality
int32[2] a
int32[2] b
int32[2] c
int32[2] d
uint32   width
uint32   height
float32  distance
float32  deflection_angle
string data
"""
  __slots__ = ['frame','type','quality','a','b','c','d','width','height','distance','deflection_angle','data']
  _slot_types = ['string','string','uint8','int32[2]','int32[2]','int32[2]','int32[2]','uint32','uint32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame,type,quality,a,b,c,d,width,height,distance,deflection_angle,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Percept, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = ''
      if self.type is None:
        self.type = ''
      if self.quality is None:
        self.quality = 0
      if self.a is None:
        self.a = [0] * 2
      if self.b is None:
        self.b = [0] * 2
      if self.c is None:
        self.c = [0] * 2
      if self.d is None:
        self.d = [0] * 2
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.distance is None:
        self.distance = 0.
      if self.deflection_angle is None:
        self.deflection_angle = 0.
      if self.data is None:
        self.data = ''
    else:
      self.frame = ''
      self.type = ''
      self.quality = 0
      self.a = [0] * 2
      self.b = [0] * 2
      self.c = [0] * 2
      self.d = [0] * 2
      self.width = 0
      self.height = 0
      self.distance = 0.
      self.deflection_angle = 0.
      self.data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.quality
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_2i().pack(*self.a))
      buff.write(_get_struct_2i().pack(*self.b))
      buff.write(_get_struct_2i().pack(*self.c))
      buff.write(_get_struct_2i().pack(*self.d))
      _x = self
      buff.write(_get_struct_2I2f().pack(_x.width, _x.height, _x.distance, _x.deflection_angle))
      _x = self.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame = str[start:end].decode('utf-8')
      else:
        self.frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.quality,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 8
      self.a = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      self.b = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      self.c = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      self.d = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.width, _x.height, _x.distance, _x.deflection_angle,) = _get_struct_2I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.quality
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.a.tostring())
      buff.write(self.b.tostring())
      buff.write(self.c.tostring())
      buff.write(self.d.tostring())
      _x = self
      buff.write(_get_struct_2I2f().pack(_x.width, _x.height, _x.distance, _x.deflection_angle))
      _x = self.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame = str[start:end].decode('utf-8')
      else:
        self.frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.quality,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 8
      self.a = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.b = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.c = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.d = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 16
      (_x.width, _x.height, _x.distance, _x.deflection_angle,) = _get_struct_2I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2f = None
def _get_struct_2I2f():
    global _struct_2I2f
    if _struct_2I2f is None:
        _struct_2I2f = struct.Struct("<2I2f")
    return _struct_2I2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
