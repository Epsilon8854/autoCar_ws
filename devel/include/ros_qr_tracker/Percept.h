// Generated by gencpp from file ros_qr_tracker/Percept.msg
// DO NOT EDIT!


#ifndef ROS_QR_TRACKER_MESSAGE_PERCEPT_H
#define ROS_QR_TRACKER_MESSAGE_PERCEPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_qr_tracker
{
template <class ContainerAllocator>
struct Percept_
{
  typedef Percept_<ContainerAllocator> Type;

  Percept_()
    : frame()
    , type()
    , quality(0)
    , a()
    , b()
    , c()
    , d()
    , width(0)
    , height(0)
    , distance(0.0)
    , deflection_angle(0.0)
    , data()  {
      a.assign(0);

      b.assign(0);

      c.assign(0);

      d.assign(0);
  }
  Percept_(const ContainerAllocator& _alloc)
    : frame(_alloc)
    , type(_alloc)
    , quality(0)
    , a()
    , b()
    , c()
    , d()
    , width(0)
    , height(0)
    , distance(0.0)
    , deflection_angle(0.0)
    , data(_alloc)  {
  (void)_alloc;
      a.assign(0);

      b.assign(0);

      c.assign(0);

      d.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_type;
  _frame_type frame;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef boost::array<int32_t, 2>  _a_type;
  _a_type a;

   typedef boost::array<int32_t, 2>  _b_type;
  _b_type b;

   typedef boost::array<int32_t, 2>  _c_type;
  _c_type c;

   typedef boost::array<int32_t, 2>  _d_type;
  _d_type d;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _deflection_angle_type;
  _deflection_angle_type deflection_angle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ros_qr_tracker::Percept_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_qr_tracker::Percept_<ContainerAllocator> const> ConstPtr;

}; // struct Percept_

typedef ::ros_qr_tracker::Percept_<std::allocator<void> > Percept;

typedef boost::shared_ptr< ::ros_qr_tracker::Percept > PerceptPtr;
typedef boost::shared_ptr< ::ros_qr_tracker::Percept const> PerceptConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_qr_tracker::Percept_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_qr_tracker::Percept_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_qr_tracker::Percept_<ContainerAllocator1> & lhs, const ::ros_qr_tracker::Percept_<ContainerAllocator2> & rhs)
{
  return lhs.frame == rhs.frame &&
    lhs.type == rhs.type &&
    lhs.quality == rhs.quality &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.d == rhs.d &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.distance == rhs.distance &&
    lhs.deflection_angle == rhs.deflection_angle &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_qr_tracker::Percept_<ContainerAllocator1> & lhs, const ::ros_qr_tracker::Percept_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_qr_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_qr_tracker::Percept_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_qr_tracker::Percept_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_qr_tracker::Percept_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_qr_tracker::Percept_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_qr_tracker::Percept_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_qr_tracker::Percept_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_qr_tracker::Percept_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa84c85dfcfcdf5ccbb58bb1c1c5e57b";
  }

  static const char* value(const ::ros_qr_tracker::Percept_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa84c85dfcfcdf5cULL;
  static const uint64_t static_value2 = 0xcbb58bb1c1c5e57bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_qr_tracker::Percept_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_qr_tracker/Percept";
  }

  static const char* value(const ::ros_qr_tracker::Percept_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_qr_tracker::Percept_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string frame\n"
"string type\n"
"uint8 quality\n"
"int32[2] a\n"
"int32[2] b\n"
"int32[2] c\n"
"int32[2] d\n"
"uint32   width\n"
"uint32   height\n"
"float32  distance\n"
"float32  deflection_angle\n"
"string data\n"
;
  }

  static const char* value(const ::ros_qr_tracker::Percept_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_qr_tracker::Percept_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame);
      stream.next(m.type);
      stream.next(m.quality);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.distance);
      stream.next(m.deflection_angle);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Percept_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_qr_tracker::Percept_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_qr_tracker::Percept_<ContainerAllocator>& v)
  {
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "a[]" << std::endl;
    for (size_t i = 0; i < v.a.size(); ++i)
    {
      s << indent << "  a[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.a[i]);
    }
    s << indent << "b[]" << std::endl;
    for (size_t i = 0; i < v.b.size(); ++i)
    {
      s << indent << "  b[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.b[i]);
    }
    s << indent << "c[]" << std::endl;
    for (size_t i = 0; i < v.c.size(); ++i)
    {
      s << indent << "  c[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.c[i]);
    }
    s << indent << "d[]" << std::endl;
    for (size_t i = 0; i < v.d.size(); ++i)
    {
      s << indent << "  d[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.d[i]);
    }
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "deflection_angle: ";
    Printer<float>::stream(s, indent + "  ", v.deflection_angle);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_QR_TRACKER_MESSAGE_PERCEPT_H
